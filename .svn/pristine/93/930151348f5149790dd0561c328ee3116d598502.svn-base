package com.boot.controller;


import java.util.List;



import java.io.File;
import java.io.IOException;

import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.boot.pojo.Classific;
import com.boot.pojo.Page;

import org.springframework.web.multipart.MultipartFile;


import com.boot.pojo.Product;
import com.boot.service.ClassificService;
import com.boot.service.ProductService;

import com.boot.service.BackProductService;
import com.boot.service.BackService;

@Controller
@RequestMapping("/back")
public class BackProductController {

	@Autowired
	private ProductService productService;
	@Autowired
	private ClassificService classificService;
	//private String patrh = 

	@Autowired
	private BackProductService backProductService;



	@Autowired
	private BackService backService;

	@RequestMapping("/toBacklist")
	public String toBacklist(){
		return "back/product_list";
	}
	@RequestMapping("/toBackDetail")
	public String toBackDetail(Model model){

		List<Classific> ListCla = classificService.findAll();
		
		model.addAttribute("ListCla", ListCla);
		
		return "back/product_detail";
	}
	//跳转更新页面
	@RequestMapping("/toupdateProduct")
	public String toupdateProduct(String productId,Model model){

		List<Classific> ListCla = classificService.findAll();
		Product product = productService.findProdInfoById(productId);
		model.addAttribute("ListCla", ListCla);
		model.addAttribute("product", product);
		return "back/product_update";
	}
	//修改商品信息
	@RequestMapping("/updateProduct")
	public String updateProduct(Product product,MultipartFile uploadFile,HttpServletRequest request ) throws IOException{
		//获取文件名称
		String filename = uploadFile.getOriginalFilename();
		if("".equals(filename)){//直接进行更新
			productService.updateProduct(product);
			return "redirect:/back/findAll";
		}
		
		backProductService.deleteProductById(product.getProductId());
		String path = request.getServletContext().getRealPath("/");
		String str = UUID.randomUUID().toString();

		// 将str转化为一个十六进制的字符串
		String hs = Integer.toHexString(str.hashCode());

		// 补足hs到8位大小
		int hslen = hs.length();
		for (int i = 0; i < 8 - hslen; i++) {
			hs += "0";
		}
		String path2=path+"/images";
		for (char c : hs.toCharArray()) {
			path2 = path2 + "/" + c;
		}
		File dir = new File(path2);
		dir.mkdirs();
		
		
		String imageUrl = path2.substring(path2.indexOf("images"))+"/" +filename;
		uploadFile.transferTo(new File(path2+"/"+filename));
		product.setImageUrl(imageUrl);
		
		productService.addProduct(product);
		return "redirect:/back/findAll";
	}
	
	@RequestMapping("/insertFile")
	public void insertFile(Product product,MultipartFile uploadFile,HttpServletRequest request,HttpServletResponse response,Model model) throws  IOException, ServletException{
		response.setContentType("text/html;charset=utf-8");
		//获取文件名称
		String filename = uploadFile.getOriginalFilename();
		if("".equals(filename)){
			request.setAttribute("msg", "请添加图片信息!!!!!!");
			request.setAttribute("product", product);
			request.getRequestDispatcher("/back/toBackDetail").forward(request, response);
			return;
		}
		String path = request.getServletContext().getRealPath("/");
		String str = UUID.randomUUID().toString();

		// 将str转化为一个十六进制的字符串
		String hs = Integer.toHexString(str.hashCode());

		// 补足hs到8位大小
		int hslen = hs.length();
		for (int i = 0; i < 8 - hslen; i++) {
			hs += "0";
		}
		String path2=path+"/images";
		for (char c : hs.toCharArray()) {
			path2 = path2 + "/" + c;
		}
		File dir = new File(path2);
		dir.mkdirs();
		
		
		String imageUrl = path2.substring(path2.indexOf("images"))+"/" +filename;
		uploadFile.transferTo(new File(path2+"/"+filename));
		product.setImageUrl(imageUrl);
		productService.addProduct(product);
		//response.setHeader("refresh", "3;url=");
		
		response.getWriter().write("添加成功，3秒后自动跳转，如果未自动跳转，" +
				"请<a href='"+request.getContextPath()+"/back/toBackDetail'>点击此处</a>");
		response.setHeader("Refresh", "3;url="+request.getContextPath()+"/back/toBackDetail");								
	}
	
	

	@RequestMapping("/findAll")
	public String findAll(Model model,Page page,String minprice,String maxprice,
			String classificName,String proName){
		Double _min=null;
		Double _max=null;
		String _classificName=null;
		String _proName=null;
		if(!(minprice==null)&&!("".equals(minprice))){
			_min=Double.parseDouble(minprice.trim());
		}
		if(!(maxprice==null)&&!("".equals(maxprice))){
			_max=Double.parseDouble(maxprice.trim());
		}
		if(!(classificName==null)&&!("".equals(classificName))){
			_classificName=classificName;
		}
		if(!(proName==null)&&!("".equals(proName))){
			_proName=proName;
		}
		Number count =backProductService.findCount(_min,_max,_classificName,_proName);
		page.setRecords((Integer) count);
		List<Product> productCurrentPageList=
				backProductService.findproductListByKeyAndPage(page.getPerpage(),page.getCurrentPage(),
						_min,_max,_classificName,_proName);
		model.addAttribute("proName", _proName);
		model.addAttribute("minprice", _min);
		model.addAttribute("maxprice", _max);
		model.addAttribute("page", page);
		model.addAttribute("classificName", _classificName);
		model.addAttribute("productCurrentPageList", productCurrentPageList);
		return "back/product_list";
	}

	@RequestMapping("deleteProducts")
	public String deleteProducts(@RequestParam(value="productId",required=true)String[] productIds){
		backProductService.deleteProducts(productIds);
		return "redirect:/back/findAll";
	}
	@RequestMapping("/deleteProduct")
	public String deleteProduct(String productId){
		backProductService.deleteProductById(productId);

		return "redirect:/back/findAll";
	}

	

	
	@RequestMapping("/toView")
	public String toView(String productId,Model model){
		List<Classific> ListCla = classificService.findAll();
		Product product = productService.findProdInfoById(productId);
		model.addAttribute("ListCla", ListCla);
		model.addAttribute("product", product);
		return "back/product_view";
	}
	
	


}
