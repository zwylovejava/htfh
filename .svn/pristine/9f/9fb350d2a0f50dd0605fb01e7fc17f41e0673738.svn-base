package com.boot.shiro;

import java.util.LinkedHashMap;

import org.apache.shiro.spring.LifecycleBeanPostProcessor;
import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.apache.shiro.authc.credential.CredentialsMatcher;
import org.apache.shiro.mgt.SecurityManager;


/**
 * shiro的配置类
 * @author Administrator
 *
 */
@Configuration
public class ShiroConfiguration {
	 @Bean(name="shiroFilter")
	    public ShiroFilterFactoryBean shiroFilter(@Qualifier("securityManager") SecurityManager manager) {
	        ShiroFilterFactoryBean bean=new ShiroFilterFactoryBean();
	        bean.setSecurityManager(manager);
	        //配置登录的url和登录成功的url
	        bean.setLoginUrl("/home");
	        bean.setSuccessUrl("/home");
	        //配置访问权限
	        LinkedHashMap<String, String> filterChainDefinitionMap=new LinkedHashMap<>();
	        filterChainDefinitionMap.put("/AD/**", "anon"); //表示可以匿名访问
	        filterChainDefinitionMap.put("/css/**", "anon"); //表示可以匿名访问
	        filterChainDefinitionMap.put("/home/**", "anon"); //表示可以匿名访问
	        filterChainDefinitionMap.put("/images/**", "anon"); //表示可以匿名访问
	        filterChainDefinitionMap.put("/js/**", "anon"); //表示可以匿名访问
	        filterChainDefinitionMap.put("/layer/**", "anon"); //表示可以匿名访问
	        filterChainDefinitionMap.put("/Plugins/**", "anon"); //表示可以匿名访问
	        filterChainDefinitionMap.put("/products/**", "anon"); //表示可以匿名访问
	        filterChainDefinitionMap.put("/skins/**", "anon"); //放行静态资源
	  
	        filterChainDefinitionMap.put("/home.action", "anon"); //表示可以匿名访问
	        filterChainDefinitionMap.put("/ajaxPhoneNum", "anon"); //表示可以匿名访问
	        filterChainDefinitionMap.put("/regist","anon");	
	        filterChainDefinitionMap.put("/toregist","anon");	
	        filterChainDefinitionMap.put("/login", "anon"); 
	        filterChainDefinitionMap.put("/tologin", "anon"); 
	        filterChainDefinitionMap.put("/ajaxCheckname", "anon"); 
	        filterChainDefinitionMap.put("/ajaxPhone", "anon"); 
	        filterChainDefinitionMap.put("/ajaxSendMessage", "anon"); 
	        filterChainDefinitionMap.put("/ajaxCheckEmai", "anon"); 
	        filterChainDefinitionMap.put("/ajaxCheckCode", "anon"); 
	        filterChainDefinitionMap.put("/findPassword", "anon"); 
	        filterChainDefinitionMap.put("/resetPassword", "anon"); 
	        filterChainDefinitionMap.put("/updatePassword", "anon"); 	        
	        filterChainDefinitionMap.put("/login/findPassword", "anon"); 	        
	        filterChainDefinitionMap.put("/login/resetPassword", "anon"); 	        
	        filterChainDefinitionMap.put("/**", "authc");//表示需要认证才可以访问	   
	        bean.setFilterChainDefinitionMap(filterChainDefinitionMap);
	        return bean;
	    }
	    //配置核心安全事务管理器
	    @Bean(name="securityManager")
	    public SecurityManager securityManager(@Qualifier("authRealm") AuthRealm authRealm) {
	        //System.err.println("--------------shiro已经加载----------------");
	        DefaultWebSecurityManager manager=new DefaultWebSecurityManager();
	        manager.setRealm(authRealm);
	        return manager;
	    }
	    //配置自定义的权限登录器
	    @Bean(name="authRealm")
	    public AuthRealm authRealm(@Qualifier("credentialsMatcher") CredentialsMatcher matcher) {
	        AuthRealm authRealm=new AuthRealm();
	        authRealm.setCredentialsMatcher(matcher);
	        return authRealm;
	    }
	    //配置自定义的密码比较器
	    @Bean(name="credentialsMatcher")
	    public CredentialsMatcher credentialsMatcher() {
	        return new AuthCredential();
	    }
	    @Bean
	    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor(){
	        return new LifecycleBeanPostProcessor();
	    }
	    @Bean
	    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator(){
	        DefaultAdvisorAutoProxyCreator creator=new DefaultAdvisorAutoProxyCreator();
	        creator.setProxyTargetClass(true);
	        return creator;
	    }
	    @Bean
	    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(@Qualifier("securityManager") SecurityManager manager) {
	        AuthorizationAttributeSourceAdvisor advisor=new AuthorizationAttributeSourceAdvisor();
	   
	        advisor.setSecurityManager((org.apache.shiro.mgt.SecurityManager) manager);
	        return advisor;
	    }
}
